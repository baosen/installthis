#!/usr/bin/bash

# Check if openssl is installed used to generate a random name for the build-directory.
which openssl > /dev/null
if [ $? != 0 ]; then
  echo "Error: openssl is not installed."
  exit 1
fi

# Create a temporarily build-directory to put the built files in made by CMake.
BUILD_DIR=/tmp/build-$(openssl rand -base64 12)
mkdir -p $BUILD_DIR

# Build and install meson-projects.
if test -f "meson.build"; then
  # Check if meson is installed.
  which meson > /dev/null
  if [ $? != 0 ]; then
    echo "Error: meson is not installed."
    exit 1
  fi

  # Generate meson project files.
  meson $BUILD_DIR

  # Build it.
  cd $BUILD_DIR
  ninja

  # Install it.
  sudo ninja install

  exit 0
fi

# Build and install cmake-projects.
if test -f "CMakeLists.txt"; then
  # Check if cmake is installed.
  which cmake > /dev/null
  if [ $? != 0 ]; then
    echo "Error: cmake is not installed"
    exit 1
  fi
  
  CONFIG=Release
  
  # Check if ninja is installed.
  which ninja > /dev/null
  if [ $? == 0 ]; then
    # Generate project using ninja.
    cmake -G Ninja -DCMAKE_BUILD_TYPE=$CONFIG -B $BUILD_DIR -S $PWD
  
    # Build source code using ninja.
    cd $BUILD_DIR
    ninja
  
    # Install it.
    sudo ninja install
  else # fallback to make.
    # Check if make is installed.
    which make > /dev/null
    if [ $? != 0 ]; then
      echo "Error: make is not installed"
      exit 1
    fi
  
    # Generate project using default, which is Makefile.
    cmake -G 'Unix Makefiles' -DCMAKE_BUILD_TYPE=$CONFIG -B $BUILD_DIR -S $PWD
  
    # Build source code with make using all CPU cores on this computer.
    cd $BUILD_DIR
    make -j$(nproc)
  
    # Install it.
    sudo make install
  fi
  exit 0
fi

echo "Error: No C or C++ project found."
echo ""
echo "Usage:"
echo "  cd into a directory containing CMakeLists.txt or meson.build and execute installthis."
exit 1
